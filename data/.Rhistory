betas <- c(+20, +25, +30, +20, -10, 0, 0);
sbj_intercept_variability <- 21; # 10%
sbj_slope_variability <- 21; # 10%
overall_noise <- 30; # 15%
#this generates the vectors for the parameters above, just making them of the right dimension and format to go into the simulated dataframe (see line x below)
intercept <- rep(intercept, number_of_items_per_condition*number_of_sbj*2);
design_matrix <- matrix(c(rep(0,7),
1,0,0,0,0,0,0,
0,1,0,0,0,0,0,
0,0,1,0,0,0,0,
0,0,0,1,0,0,0,
1,0,0,1,1,0,0,
0,1,0,1,0,1,0,
0,0,1,1,0,0,1),
nrow=8, ncol=7, byrow=T);
#this simply generates the vectors that will collect the relevant numbers from the simulations, one for the mixed modelling and one for the t test
out_t_values_mixed_model <- vector(mode='numeric', length=n_sim);
#out_p_values_t_test <- vector(length=n_sim);
out_datasets <- list();
#and finally, now, to the real game :-)
for (i in 1:n_sim)
{
#this generates the participants' features for this particular round of simulations
sbj_intercept <- rep(rnorm(mean=0, sd=sbj_intercept_variability, n=number_of_sbj), each=number_of_items_per_condition*2);
#sbj_slope <- rep(rnorm(mean=0, sd=sbj_slope_variability, n=number_of_sbj), each=number_of_items_per_condition*2);
#this is the overall, general error, which just distributes across all items and subjects uniformly (i.e., there's no structure)
error <- rnorm(mean=0, sd=overall_noise, n=number_of_items_per_condition*2*number_of_sbj);
#this actually generates the simulated values
extended_design_matrix <- design_matrix;
for (k in 1:15)  extended_design_matrix <- rbind(extended_design_matrix, design_matrix);
fixed_effects <- extended_design_matrix %*% betas;
estimated_fixation_times <- (intercept+sbj_intercept) + rep(fixed_effects, number_of_sbj) + error;
#this merely put everything together in a dataframe that the 'glmer' function below will like
simulated_data <- data.frame(estimated_fixation_times=estimated_fixation_times, preview_type=rep(c('identity','cognate','legal_nw','illegal_nw'), number_of_sbj*32), morphology=rep(rep(c('simple','complex'), each=4), number_of_sbj*16), sbj_id=rep(seq(1:number_of_sbj), each=number_of_items_per_condition*2));
#out_datasets[[i]] <- simulated_data;
#this is the modelling part, which is essentially reverse-engineering the data, that is, it's trying to estimate the ground-truth parameters we set above (baseline_parameter and, more importantly, difference_between_conditions_parameter) from the simulated data (which is not so banal, cause we injected noise in the data -- like the harsh, evil real world will do with our data)
#model <- glmer(estimated_fixation_times ~ identity_type*morphology + (1|sbj_id) + (0+cross_linguistic|sbj_id), data=simulated_data);
simulated_data$morphology <- factor(simulated_data$morphology);
simulated_data$preview_type <- factor(simulated_data$preview_type);
simulated_data$morphology <- relevel(simulated_data$morphology, 'simple');
simulated_data$preview_type <- relevel(simulated_data$preview_type, 'identity');
model <- lmer(estimated_fixation_times ~ preview_type*morphology + (1|sbj_id), data=simulated_data);
#this is writing out to our dummy variable the metric of interest from the model, which we'll then use to compute power
out_t_values_mixed_model[i] <- summary(model)[[10]][6,3];
#this prepares the dataset for a t test, which needs aggregated data
#data_for_t_test <- aggregate(estimated_choices ~ cross_linguistic + sbj_id, FUN=mean, data=simulated_data);
#this runs the t test
#temp <- t.test(data_for_t_test$estimated_choices[data_for_t_test$cross_linguistic==0], data_for_t_test$estimated_choices[data_for_t_test$cross_linguistic==1], paired=T, alternative='less');
#and again, this is just writing the metric of interest into our dummy, output-collection variable
#out_p_values_t_test[i] <- temp[[3]];
if (i%%10==0) print(i);
#rm(model, simulated_data, sbj_intercept, sbj_slope, error, estimated_probs, estimated_choices, data_for_t_test, temp);
}
summary(out_t_values_mixed_model < -2)
rm(list=ls()); #this clears the workspace
library(lme4);
n_sim <- 500; #this is the number of simulations that we will run
number_of_items_per_condition <- 64; # 32 simple words, 32 complex words, each seen twice (in two different sentences)
number_of_sbj <- 55;
intercept <- 210; # 1st fixation duration for Identical condition (Fernandez & Sheepers, 2024)
# Simple words: Identical vs Cognate = 20 ms so maybe half of that is the role of morphology? This would imply +20 for beta2 and -10 for beta 5
betas <- c(+20, +25, +30, +20, -5, 0, 0);
sbj_intercept_variability <- 30; # 15%
sbj_slope_variability <- 30; # 15%
overall_noise <- 40; # 20%
#this generates the vectors for the parameters above, just making them of the right dimension and format to go into the simulated dataframe (see line x below)
intercept <- rep(intercept, number_of_items_per_condition*number_of_sbj*2);
design_matrix <- matrix(c(rep(0,7),
1,0,0,0,0,0,0,
0,1,0,0,0,0,0,
0,0,1,0,0,0,0,
0,0,0,1,0,0,0,
1,0,0,1,1,0,0,
0,1,0,1,0,1,0,
0,0,1,1,0,0,1),
nrow=8, ncol=7, byrow=T);
#this simply generates the vectors that will collect the relevant numbers from the simulations, one for the mixed modelling and one for the t test
out_t_values_mixed_model <- vector(mode='numeric', length=n_sim);
#out_p_values_t_test <- vector(length=n_sim);
out_datasets <- list();
#and finally, now, to the real game :-)
for (i in 1:n_sim)
{
#this generates the participants' features for this particular round of simulations
sbj_intercept <- rep(rnorm(mean=0, sd=sbj_intercept_variability, n=number_of_sbj), each=number_of_items_per_condition*2);
#sbj_slope <- rep(rnorm(mean=0, sd=sbj_slope_variability, n=number_of_sbj), each=number_of_items_per_condition*2);
#this is the overall, general error, which just distributes across all items and subjects uniformly (i.e., there's no structure)
error <- rnorm(mean=0, sd=overall_noise, n=number_of_items_per_condition*2*number_of_sbj);
#this actually generates the simulated values
extended_design_matrix <- design_matrix;
for (k in 1:15)  extended_design_matrix <- rbind(extended_design_matrix, design_matrix);
fixed_effects <- extended_design_matrix %*% betas;
estimated_fixation_times <- (intercept+sbj_intercept) + rep(fixed_effects, number_of_sbj) + error;
#this merely put everything together in a dataframe that the 'glmer' function below will like
simulated_data <- data.frame(estimated_fixation_times=estimated_fixation_times, preview_type=rep(c('identity','cognate','legal_nw','illegal_nw'), number_of_sbj*32), morphology=rep(rep(c('simple','complex'), each=4), number_of_sbj*16), sbj_id=rep(seq(1:number_of_sbj), each=number_of_items_per_condition*2));
#out_datasets[[i]] <- simulated_data;
#this is the modelling part, which is essentially reverse-engineering the data, that is, it's trying to estimate the ground-truth parameters we set above (baseline_parameter and, more importantly, difference_between_conditions_parameter) from the simulated data (which is not so banal, cause we injected noise in the data -- like the harsh, evil real world will do with our data)
#model <- glmer(estimated_fixation_times ~ identity_type*morphology + (1|sbj_id) + (0+cross_linguistic|sbj_id), data=simulated_data);
simulated_data$morphology <- factor(simulated_data$morphology);
simulated_data$preview_type <- factor(simulated_data$preview_type);
simulated_data$morphology <- relevel(simulated_data$morphology, 'simple');
simulated_data$preview_type <- relevel(simulated_data$preview_type, 'identity');
model <- lmer(estimated_fixation_times ~ preview_type*morphology + (1|sbj_id), data=simulated_data);
#this is writing out to our dummy variable the metric of interest from the model, which we'll then use to compute power
out_t_values_mixed_model[i] <- summary(model)[[10]][6,3];
#this prepares the dataset for a t test, which needs aggregated data
#data_for_t_test <- aggregate(estimated_choices ~ cross_linguistic + sbj_id, FUN=mean, data=simulated_data);
#this runs the t test
#temp <- t.test(data_for_t_test$estimated_choices[data_for_t_test$cross_linguistic==0], data_for_t_test$estimated_choices[data_for_t_test$cross_linguistic==1], paired=T, alternative='less');
#and again, this is just writing the metric of interest into our dummy, output-collection variable
#out_p_values_t_test[i] <- temp[[3]];
if (i%%10==0) print(i);
#rm(model, simulated_data, sbj_intercept, sbj_slope, error, estimated_probs, estimated_choices, data_for_t_test, temp);
}
summary(out_t_values_mixed_model < -2)
226/500
install.packages('popEye')
require(devtools)
install_github('sascha2schroeder/popEye')
library(devtools)
install.packages('devtools')
library(devtools)
install_github('sascha2schroeder/popEye')
install_github('sascha2schroeder/popEye')
install.packages('popEye')
library(remotes)
install_github('sascha2schroeder/popEye')
install_github('sascha2schroeder/popEye')
library(devtools)
install_github('sascha2schroeder/popEye')
install_github('sascha2schroeder/popEye')
setwd("C:/Users/annal/OneDrive/Documents/GitHub/bilingualboundary/data");
all_ET <- read.csv("all_ET.csv",header=T,sep=",");
all_scores <- read.csv("all_scores.csv",header=T,sep=",");
all_ET <- subset(all_ET, select = -c(X,pre_target,post_target,type,TextBlock,adjusted_seq,fixations,rec_id,msgs));
all_ET$morph_type <- factor(all_ET$morph_type, levels=c("simple", "complex"));
all_ET$lst_type <- factor(all_ET$lst_type);
all_ET$target <- factor(all_ET$target);
all_ET$preview <- factor(all_ET$preview);
all_ET$trial_type <- factor(all_ET$trial_type, levels=c("identical", "cognate", "legal_nonword", "illegal_nonword"));
all_ET$trial_issue <- factor(all_ET$trial_issue);
all_scores <- subset(all_scores, select = -c(X));
all_scores$sbj_ID <- as.factor(all_scores$sbj_ID);
all_scores$gender <- as.factor(all_scores$gender);
all_data <- merge(all_ET, all_scores,by="sbj_ID");
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD>6000] <- "LONG_GPD";
# means for each condition
library(plotrix);
#FFD
FFD_sID <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='identical']);
# 246ms
FFD_sCG <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='cognate']);
# 274ms
FFD_sLN <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='legal_nonword']);
# 278ms
FFD_sIN <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='illegal_nonword']);
# 302ms
FFD_cID <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='identical']);
# 250ms
FFD_cCG <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='cognate']);
# 261ms
FFD_cLN <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='legal_nonword']);
# 281ms
FFD_cIN <- mean(all_data$FFD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='illegal_nonword']);
# 296ms
FFDsimple <- c(FFD_sID, FFD_sCG, FFD_sLN, FFD_sIN);
FFDcomplex <- c(FFD_cID, FFD_cCG, FFD_cLN, FFD_cIN);
FFD <- data.frame(FFDsimple,FFDcomplex);
colnames(FFD) <- c("simple","complex");
rownames(FFD) <- c("ID","CG","LN","IN");
FFD_IDcost <- FFD_sCG - FFD_sID; # 28ms
FFD_complexcost <- mean(c(FFD_cID-FFD_sID,FFD_cIN-FFD_sIN,FFD_cIN-FFD_sIN)); # -3ms
FFD_Sbenefit <- FFD_sCG-FFD_sLN; # -4ms
FFD_Obenefit <- FFD_sLN-FFD_sIN; # -25ms
FFD_Mbenefit <- (FFD_complexcost - (FFD_cCG-FFD_sCG)); # 11ms
#FoM
FoM_sID <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='identical'],na.rm=TRUE);
# 232ms
FoM_sCG <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='cognate'],na.rm=TRUE);
# 260ms
FoM_sLN <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='legal_nonword'],na.rm=TRUE);
# 250ms
FoM_sIN <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='illegal_nonword'],na.rm=TRUE);
# 2289ms
FoM_cID <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='identical'],na.rm=TRUE);
# 241ms
FoM_cCG <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='cognate'],na.rm=TRUE);
# 249ms
FoM_cLN <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='legal_nonword'],na.rm=TRUE);
# 268ms
FoM_cIN <- mean(all_data$FoM_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='illegal_nonword'],na.rm=TRUE);
# 259ms
FoMsimple <- c(FoM_sID, FoM_sCG, FoM_sLN, FoM_sIN);
FoMcomplex <- c(FoM_cID, FoM_cCG, FoM_cLN, FoM_cIN);
FoM <- data.frame(FoMsimple,FoMcomplex);
colnames(FoM) <- c("simple","complex");
rownames(FoM) <- c("ID","CG","LN","IN");
FoM_IDcost <- FoM_sCG - FoM_sID; # 28ms
FoM_complexcost <- mean(c(FoM_cID-FoM_sID,FoM_cIN-FoM_sIN,FoM_cIN-FoM_sIN)); # -17ms
FoM_Sbenefit <- FoM_sCG-FoM_sLN; # 11ms
FoM_Obenefit <- FoM_sLN-FoM_sIN; # -39ms
FoM_Mbenefit <- (FoM_complexcost - (FoM_cCG-FoM_sCG)); # -5
#GPD
GPD_sID <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='identical']);
# 427ms
GPD_sCG <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='cognate']);
# 474ms
GPD_sLN <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='legal_nonword']);
# 468ms
GPD_sIN <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='illegal_nonword']);
# 594ms
GPD_cID <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='identical']);
# 441ms
GPD_cCG <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='cognate']);
# 501ms
GPD_cLN <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='legal_nonword']);
# 552ms
GPD_cIN <- mean(all_data$GPD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='illegal_nonword']);
# 615ms
GPDsimple <- c(GPD_sID, GPD_sCG, GPD_sLN, GPD_sIN);
GPDcomplex <- c(GPD_cID, GPD_cCG, GPD_cLN, GPD_cIN);
GPD <- data.frame(GPDsimple,GPDcomplex);
colnames(GPD) <- c("simple","complex");
rownames(GPD) <- c("ID","CG","LN","IN");
GPD_IDcost <- GPD_sCG - GPD_sID; # 47ms
GPD_complexcost <- mean(c(GPD_cID-GPD_sID,GPD_cIN-GPD_sIN,GPD_cIN-GPD_sIN)); # 18ms
GPD_Sbenefit <- GPD_sCG-GPD_sLN; # 6ms
GPD_Obenefit <- GPD_sLN-GPD_sIN; # -126ms
GPD_Mbenefit <- (GPD_complexcost - (GPD_cCG-GPD_sCG)); # -9ms
#GD
GD_sID <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='identical']);
# 323ms
GD_sCG <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='cognate']);
# 363ms
GD_sLN <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='legal_nonword']);
# 372ms
GD_sIN <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='simple'&all_data$trial_type=='illegal_nonword']);
# 401ms
GD_cID <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='identical']);
# 394ms
GD_cCG <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='cognate']);
# 389ms
GD_cLN <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='legal_nonword']);
# 419ms
GD_cIN <- mean(all_data$GD_noshortfixs[all_data$trial_issue=='N'&all_data$morph_type=='complex'&all_data$trial_type=='illegal_nonword']);
# 437ms
GDsimple <- c(GD_sID, GD_sCG, GD_sLN, GD_sIN);
GDcomplex <- c(GD_cID, GD_cCG, GD_cLN, GD_cIN);
GD <- data.frame(GDsimple,GDcomplex);
colnames(GD) <- c("simple","complex");
rownames(GD) <- c("ID","CG","LN","IN");
GD_IDcost <- GD_sCG - GD_sID; # 39ms
GD_complexcost <- mean(c(GD_cID-GD_sID,GD_cIN-GD_sIN,GD_cIN-GD_sIN)); # 48ms
GD_Sbenefit <- GD_sCG-GD_sLN; # -9ms
GD_Obenefit <- GD_sLN-GD_sIN; # -29ms
GD_Mbenefit <- -(GD_complexcost - (GD_cCG-GD_sCG)); # -21ms
# all costs/benefits together
FFD_costs <- c(FFD_IDcost,FFD_complexcost,FFD_Obenefit,FFD_Sbenefit,FFD_Mbenefit);
FoM_costs <- c(FoM_IDcost,FoM_complexcost,FoM_Obenefit,FoM_Sbenefit,FoM_Mbenefit);
GPD_costs <- c(GPD_IDcost,GPD_complexcost,GPD_Obenefit,GPD_Sbenefit,GPD_Mbenefit);
GD_costs <- c(GD_IDcost,GD_complexcost,GD_Obenefit,GD_Sbenefit,GD_Mbenefit);
label_costs <- c("Identical cost","Complex cost","Orthography benefit",
"Semantics benefit","Morphology benefit");
all_costs <- data.frame(label_costs,FFD_costs,FoM_costs,GPD_costs,GD_costs);
rownames(all_costs) <- c("ID_cost","complex_cost","Obenefit","Sbenefit","Mbenefit");
colnames(all_costs) <- c("type","FFD","FoM","GPD","GD");
all_costs$type <- factor(all_costs$type, levels=unique(all_costs$type));
View(all_costs)
# contrast coding
all_data <- all_data %>%
mutate(morph_coded = case_when(morph_type == 'simple' ~ -0.5,
morph_type == 'complex' ~ 0.5))
# lmers
library(lmerTest);
library(dplyr);
# contrast coding
all_data <- all_data %>%
mutate(morph_coded = case_when(morph_type == 'simple' ~ -0.5,
morph_type == 'complex' ~ 0.5))
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_coded*trial_type + (1|sbj_ID), data=all_data);
summary(all_data)
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + morph_coded*trial_type + (1|sbj_ID), data=all_data);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + morph_coded*trial_type + (1|sbj_ID), data=all_data);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data);
summary(lm_FFD_all)
summary(lm_FFD_all)
lm_FoM_all <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data);
lm_GD_all <- lmer(GD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data);
lm_GPD_all <- lmer(GPD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD",]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N']);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_FoM_all <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_GD_all <- lmer(GD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_GPD_all <- lmer(GPD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD",]);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
# lmers
library(lmerTest);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
View(all_data)
lm_FoM_noshortfixs <- lmer(FoM_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
lm_GD_noshortfixs <- lmer(GD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
summary(all_data)
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD",]);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD>6000] <- "LONG_GPD";
library(dplyr);
setwd("C:/Users/annal/OneDrive/Documents/GitHub/bilingualboundary/data");
all_ET <- read.csv("all_ET.csv",header=T,sep=",");
all_scores <- read.csv("all_scores.csv",header=T,sep=",");
all_ET <- subset(all_ET, select = -c(X,pre_target,post_target,type,TextBlock,adjusted_seq,fixations,rec_id,msgs));
all_ET$morph_type <- factor(all_ET$morph_type, levels=c("simple", "complex"));
all_ET$lst_type <- factor(all_ET$lst_type);
all_ET$target <- factor(all_ET$target);
all_ET$preview <- factor(all_ET$preview);
all_ET$trial_type <- factor(all_ET$trial_type, levels=c("identical", "cognate", "legal_nonword", "illegal_nonword"));
all_ET$trial_issue <- factor(all_ET$trial_issue);
all_scores <- subset(all_scores, select = -c(X));
all_scores$sbj_ID <- as.factor(all_scores$sbj_ID);
all_scores$gender <- as.factor(all_scores$gender);
all_data <- merge(all_ET, all_scores,by="sbj_ID");
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD>6000] <- "LONG_GPD";
library(dplyr);
setwd("C:/Users/annal/OneDrive/Documents/GitHub/bilingualboundary/data");
all_ET <- read.csv("all_ET.csv",header=T,sep=",");
all_scores <- read.csv("all_scores.csv",header=T,sep=",");
all_ET <- subset(all_ET, select = -c(X,pre_target,post_target,type,TextBlock,adjusted_seq,fixations,rec_id,msgs));
all_ET$morph_type <- factor(all_ET$morph_type, levels=c("simple", "complex"));
all_ET$lst_type <- factor(all_ET$lst_type);
all_ET$target <- factor(all_ET$target);
all_ET$preview <- factor(all_ET$preview);
all_ET$trial_type <- factor(all_ET$trial_type, levels=c("identical", "cognate", "legal_nonword", "illegal_nonword"));
all_ET$trial_issue <- factor(all_ET$trial_issue);
all_scores <- subset(all_scores, select = -c(X));
all_scores$sbj_ID <- as.factor(all_scores$sbj_ID);
all_scores$gender <- as.factor(all_scores$gender);
all_data <- merge(all_ET, all_scores,by="sbj_ID");
summary(all_data)
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD>6000] <- "LONG_GPD";
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD_all>6000] <- "LONG_GPD";
all_ET <- read.csv("all_ET.csv",header=T,sep=",");
all_scores <- read.csv("all_scores.csv",header=T,sep=",");
all_ET <- subset(all_ET, select = -c(X,pre_target,post_target,type,TextBlock,adjusted_seq,fixations,rec_id,msgs));
all_ET$morph_type <- factor(all_ET$morph_type, levels=c("simple", "complex"));
all_ET$lst_type <- factor(all_ET$lst_type);
all_ET$target <- factor(all_ET$target);
all_ET$preview <- factor(all_ET$preview);
all_ET$trial_type <- factor(all_ET$trial_type, levels=c("identical", "cognate", "legal_nonword", "illegal_nonword"));
all_ET$trial_issue <- factor(all_ET$trial_issue);
all_scores <- subset(all_scores, select = -c(X));
all_scores$sbj_ID <- as.factor(all_scores$sbj_ID);
all_scores$gender <- as.factor(all_scores$gender);
all_data <- merge(all_ET, all_scores,by="sbj_ID");
hist(all_data$GPD_all,breaks=seq(0,16000,100),main="GPD",xlab="GPD (ms)");
summary(all_data$GPD_all)
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD_all>6000] <- "LONG_GPD";
summary(all_data$GPD_all)
summary(all_data$trial_issue)
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD_all>6000] <- factor("LONG_GPD");
setwd("C:/Users/annal/OneDrive/Documents/GitHub/bilingualboundary/data");
all_ET <- read.csv("all_ET.csv",header=T,sep=",");
all_scores <- read.csv("all_scores.csv",header=T,sep=",");
all_ET <- subset(all_ET, select = -c(X,pre_target,post_target,type,TextBlock,adjusted_seq,fixations,rec_id,msgs));
all_ET$morph_type <- factor(all_ET$morph_type, levels=c("simple", "complex"));
all_ET$lst_type <- factor(all_ET$lst_type);
all_ET$target <- factor(all_ET$target);
all_ET$preview <- factor(all_ET$preview);
all_ET$trial_type <- factor(all_ET$trial_type, levels=c("identical", "cognate", "legal_nonword", "illegal_nonword"));
all_scores <- subset(all_scores, select = -c(X));
all_scores$sbj_ID <- as.factor(all_scores$sbj_ID);
all_scores$gender <- as.factor(all_scores$gender);
all_data <- merge(all_ET, all_scores,by="sbj_ID");
# potential trial exclusions - too long GPD
all_data$trial_issue[all_data$GPD_all>6000] <- "LONG_GPD";
all_ET$trial_issue <- factor(all_ET$trial_issue);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
# contrast coding
all_data <- all_data %>%
mutate(morph_coded = case_when(morph_type == 'simple' ~ -0.5,
morph_type == 'complex' ~ 0.5))
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
summary(all_data$trial_issue)
all_data$trial_issue <- factor(all_data$trial_issue);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$excluded=="GOOD"&all_data$trial_issue=='N',]);
summary(all_data$trial_issue)
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
lm_FoM_all <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
summary(all_data$trial_issue)
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue==N&all_data$trial_issue==LONG_GPD,]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&&all_data$trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
N
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='LONG_GPD',]);
View(all_data[all_data$trial_issue=='LONG_GPD'])
View(all_data[all_data$trial_issue=='LONG_GPD',])
lm_FoM_all <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
lm_FoM_all <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',],REML=F);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',],na.action = na.exclude);
View(all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',])
summary(all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',])
View(all_data[all_data$trial_issue=='N'&&all_data$trial_issue=='LONG_GPD',])
# all data
temp <- all_data[all_data$trial_issue=='N'&&all_data$trial_issue=='LONG_GPD',];
# all data
temp <- all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',];
View(temp)
summary(all_data)
# all data
temp <- all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',];
# all data
temp <- all_data[all_data$trial_issue=='N',];
# all data
temp <- all_data[all_data$trial_issue=='LONG_GPD',];
# all data
temp <- all_data[all_data$trial_issue=='N',];
# all data
temp <- all_data[all_data$trial_issue=='N'&all_data$trial_issue=='LONG_GPD',];
# all data
temp <- all_data[all_data$trial_issue=='N',];
temp2 <- all_data[all_data$trial_issue=='LONG_GPD',];
temp3 <- rbind(temp,temp2);
View(temp3)
summary(temp3)
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=temp3);
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
# all data
lm_FFD_all <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
lm_FoM_all <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
lm_GD_all <- lmer(GD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
lm_GPD_all <- lmer(GPD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
# without short fixations
lm_FFD_noshortfixs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
lm_FoM_noshortfixs <- lmer(FoM_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
lm_GD_noshortfixs <- lmer(GD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
lm_GPD_noshortfixs <- lmer(GPD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N'|all_data$trial_issue=='LONG_GPD',]);
# all data without long GPDs
lm_FFD_nolongGPDs <- lmer(FFD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_FoM_nolongGPDs <- lmer(FoM_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_GD_nolongGPDs <- lmer(GD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_GPD_nolongGPDsl <- lmer(GPD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
summary(lm_FFD_all)
summary(lm_FoM_all)
summary(lm_GPD_all)
summary(lm_GD_all)
lm_FFD_noshortfixs
summary(lm_FFD_noshortfixs)
summary(lm_FoM_noshortfixs)
summary(lm_FGPD_noshortfixs)
summary(lm_GPD_noshortfixs)
summary(lm_GD_noshortfixs)
summary(lm_GD_nolongGPDs)
summary(lm_GPD_nolongGPDs)
lm_GPD_nolongGPDs <- lmer(GPD_all ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
summary(lm_GPD_nolongGPDs)
summary(lm_FFD_nolongGPDs)
summary(lm_FoM_nolongGPDs)
summary(lm_FoM_noshortfixs_nolongGPDs)
# without short fixations or long GPDs
lm_FFD_noshortfixs_nolongGPDs <- lmer(FFD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_FoM_noshortfixs_nolongGPDs <- lmer(FoM_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_GD_noshortfixs_nolongGPDs <- lmer(GD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
lm_GPD_noshortfixs_nolongGPDs <- lmer(GPD_noshortfixs ~ scale(trial_id) + morph_score + lextale_score + changes_seen + morph_coded*trial_type + (1|sbj_ID), data=all_data[all_data$trial_issue=='N',]);
summary(lm_FoM_noshortfixs_nolongGPDs)
summary(lm_FFD_noshortfixs_nolongGPDs)
summary(lm_FoM_noshortfixs_nolongGPDs)
summary(lm_GPD_noshortfixs_nolongGPDs)
summary(lm_GD_noshortfixs_nolongGPDs)
